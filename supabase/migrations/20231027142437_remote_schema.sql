
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."categories" (
    "id" bigint NOT NULL,
    "createdAt" timestamp with time zone DEFAULT "now"(),
    "categories" "text" NOT NULL,
    "image" "text"
);

ALTER TABLE "public"."categories" OWNER TO "postgres";

ALTER TABLE "public"."categories" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."categories_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."countries" (
    "country" "text" NOT NULL,
    "latitude" double precision,
    "longitude" double precision,
    "name" "text" NOT NULL
);

ALTER TABLE "public"."countries" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."favorites" (
    "id" bigint NOT NULL,
    "createdAt" timestamp with time zone DEFAULT "now"(),
    "recipe" bigint NOT NULL,
    "user" "uuid" NOT NULL
);

ALTER TABLE "public"."favorites" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."favoritesDev" (
    "id" bigint NOT NULL,
    "createdAt" timestamp with time zone DEFAULT "now"(),
    "recipe" bigint NOT NULL,
    "user" "uuid" NOT NULL
);

ALTER TABLE "public"."favoritesDev" OWNER TO "postgres";

ALTER TABLE "public"."favorites" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."favorites_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE "public"."favoritesDev" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."favourites-dev_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."recipes" (
    "id" bigint NOT NULL,
    "createdAt" timestamp with time zone DEFAULT "now"(),
    "name" "text" NOT NULL,
    "description" "text",
    "steps" "text"[],
    "keywords" "text"[],
    "ingredients" "text"[],
    "cookTime" bigint,
    "prepTime" bigint,
    "images" "text"[],
    "difficultyRating" smallint,
    "servingNumber" integer,
    "source" "text",
    "country" "text",
    "category" "text",
    "region" character varying,
    "vegStatus" "text",
    "notes" "text"[],
    "canBeFrozen" boolean,
    CONSTRAINT "recipes_cook_time_check" CHECK (("cookTime" >= 0)),
    CONSTRAINT "recipes_difficulty_rating_check" CHECK (("difficultyRating" < 11)),
    CONSTRAINT "recipes_prep_time_check" CHECK (("prepTime" >= 0))
);

ALTER TABLE "public"."recipes" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."recipesDev" (
    "id" bigint NOT NULL,
    "createdAt" timestamp with time zone DEFAULT "now"(),
    "name" "text" NOT NULL,
    "description" "text",
    "steps" "text"[],
    "keywords" "text"[],
    "ingredients" "text"[],
    "cookTime" bigint,
    "prepTime" bigint,
    "images" "text"[],
    "difficultyRating" smallint,
    "servingNumber" integer,
    "source" "text",
    "country" "text",
    "category" "text",
    "region" character varying,
    "vegStatus" "text",
    "notes" "text"[],
    "canBeFrozen" boolean,
    CONSTRAINT "recipes-dev_cook_time_check" CHECK (("cookTime" >= 0)),
    CONSTRAINT "recipes-dev_prep_time_check" CHECK (("prepTime" >= 0)),
    CONSTRAINT "recipes_difficulty_rating_check" CHECK (("difficultyRating" < 11))
);

ALTER TABLE "public"."recipesDev" OWNER TO "postgres";

ALTER TABLE "public"."recipesDev" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."recipes_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE "public"."recipes" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."recipes_id_seq1"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."regions" (
    "id" bigint NOT NULL,
    "createdAt" timestamp with time zone DEFAULT "now"(),
    "region" character varying NOT NULL
);

ALTER TABLE "public"."regions" OWNER TO "postgres";

ALTER TABLE "public"."regions" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."regions_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."units" (
    "id" bigint NOT NULL,
    "createdAt" timestamp with time zone DEFAULT "now"(),
    "unit" "text" NOT NULL
);

ALTER TABLE "public"."units" OWNER TO "postgres";

ALTER TABLE "public"."units" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."units_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."categories"
    ADD CONSTRAINT "categories_categories_key" UNIQUE ("categories");

ALTER TABLE ONLY "public"."categories"
    ADD CONSTRAINT "categories_pkey" PRIMARY KEY ("id", "categories");

ALTER TABLE ONLY "public"."countries"
    ADD CONSTRAINT "countries_name_key" UNIQUE ("name");

ALTER TABLE ONLY "public"."countries"
    ADD CONSTRAINT "countries_pkey" PRIMARY KEY ("country", "name");

ALTER TABLE ONLY "public"."favorites"
    ADD CONSTRAINT "favorites_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."favoritesDev"
    ADD CONSTRAINT "favourites-dev_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."recipesDev"
    ADD CONSTRAINT "recipes_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."recipes"
    ADD CONSTRAINT "recipes_pkey1" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."regions"
    ADD CONSTRAINT "regions_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."regions"
    ADD CONSTRAINT "regions_pkey" PRIMARY KEY ("id", "region");

ALTER TABLE ONLY "public"."regions"
    ADD CONSTRAINT "regions_region_key" UNIQUE ("region");

ALTER TABLE ONLY "public"."units"
    ADD CONSTRAINT "units_pkey" PRIMARY KEY ("id", "unit");

ALTER TABLE ONLY "public"."units"
    ADD CONSTRAINT "units_unit_key" UNIQUE ("unit");

ALTER TABLE ONLY "public"."favoritesDev"
    ADD CONSTRAINT "favoritesDev_recipe_fkey" FOREIGN KEY ("recipe") REFERENCES "public"."recipesDev"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."favoritesDev"
    ADD CONSTRAINT "favoritesDev_user_fkey" FOREIGN KEY ("user") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."favorites"
    ADD CONSTRAINT "favorites_recipe_fkey" FOREIGN KEY ("recipe") REFERENCES "public"."recipes"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."favorites"
    ADD CONSTRAINT "favorites_user_fkey" FOREIGN KEY ("user") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."recipesDev"
    ADD CONSTRAINT "recipesDev_category_fkey" FOREIGN KEY ("category") REFERENCES "public"."categories"("categories") ON DELETE SET DEFAULT;

ALTER TABLE ONLY "public"."recipesDev"
    ADD CONSTRAINT "recipesDev_country_fkey" FOREIGN KEY ("country") REFERENCES "public"."countries"("name") ON DELETE SET DEFAULT;

ALTER TABLE ONLY "public"."recipesDev"
    ADD CONSTRAINT "recipesDev_region_fkey" FOREIGN KEY ("region") REFERENCES "public"."regions"("region") ON DELETE SET DEFAULT;

ALTER TABLE ONLY "public"."recipes"
    ADD CONSTRAINT "recipes_category_fkey" FOREIGN KEY ("category") REFERENCES "public"."categories"("categories");

ALTER TABLE ONLY "public"."recipes"
    ADD CONSTRAINT "recipes_country_fkey" FOREIGN KEY ("country") REFERENCES "public"."countries"("name");

ALTER TABLE ONLY "public"."recipes"
    ADD CONSTRAINT "recipes_region_fkey" FOREIGN KEY ("region") REFERENCES "public"."regions"("region");

CREATE POLICY "Enable delete for authenticated users only" ON "public"."favoritesDev" FOR DELETE TO "authenticated" USING (true);

CREATE POLICY "Enable delete for authenticated users only" ON "public"."recipes" FOR DELETE TO "authenticated" USING (true);

CREATE POLICY "Enable delete for authenticated users only" ON "public"."recipesDev" FOR DELETE TO "authenticated" USING (true);

CREATE POLICY "Enable delete for authenticated users only" ON "public"."units" FOR DELETE TO "authenticated" USING (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."favorites" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."favoritesDev" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."recipes" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."recipesDev" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."units" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable read access for all users" ON "public"."categories" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."countries" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."recipes" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."recipesDev" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."regions" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."units" FOR SELECT USING (true);

CREATE POLICY "Enable read access for autheticated users" ON "public"."favoritesDev" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable read for authenticated users only" ON "public"."favorites" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Enable update for authenticated users only" ON "public"."recipes" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "Enable update for users based on email" ON "public"."recipesDev" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);

ALTER TABLE "public"."categories" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."countries" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."favorites" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."favoritesDev" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."recipes" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."recipesDev" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."regions" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."units" ENABLE ROW LEVEL SECURITY;

REVOKE USAGE ON SCHEMA "public" FROM PUBLIC;
GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."categories" TO "anon";
GRANT ALL ON TABLE "public"."categories" TO "authenticated";
GRANT ALL ON TABLE "public"."categories" TO "service_role";

GRANT ALL ON SEQUENCE "public"."categories_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."categories_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."categories_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."countries" TO "anon";
GRANT ALL ON TABLE "public"."countries" TO "authenticated";
GRANT ALL ON TABLE "public"."countries" TO "service_role";

GRANT ALL ON TABLE "public"."favorites" TO "anon";
GRANT ALL ON TABLE "public"."favorites" TO "authenticated";
GRANT ALL ON TABLE "public"."favorites" TO "service_role";

GRANT ALL ON TABLE "public"."favoritesDev" TO "anon";
GRANT ALL ON TABLE "public"."favoritesDev" TO "authenticated";
GRANT ALL ON TABLE "public"."favoritesDev" TO "service_role";

GRANT ALL ON SEQUENCE "public"."favorites_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."favorites_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."favorites_id_seq" TO "service_role";

GRANT ALL ON SEQUENCE "public"."favourites-dev_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."favourites-dev_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."favourites-dev_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."recipes" TO "anon";
GRANT ALL ON TABLE "public"."recipes" TO "authenticated";
GRANT ALL ON TABLE "public"."recipes" TO "service_role";

GRANT ALL ON TABLE "public"."recipesDev" TO "anon";
GRANT ALL ON TABLE "public"."recipesDev" TO "authenticated";
GRANT ALL ON TABLE "public"."recipesDev" TO "service_role";

GRANT ALL ON SEQUENCE "public"."recipes_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."recipes_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."recipes_id_seq" TO "service_role";

GRANT ALL ON SEQUENCE "public"."recipes_id_seq1" TO "anon";
GRANT ALL ON SEQUENCE "public"."recipes_id_seq1" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."recipes_id_seq1" TO "service_role";

GRANT ALL ON TABLE "public"."regions" TO "anon";
GRANT ALL ON TABLE "public"."regions" TO "authenticated";
GRANT ALL ON TABLE "public"."regions" TO "service_role";

GRANT ALL ON SEQUENCE "public"."regions_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."regions_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."regions_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."units" TO "anon";
GRANT ALL ON TABLE "public"."units" TO "authenticated";
GRANT ALL ON TABLE "public"."units" TO "service_role";

GRANT ALL ON SEQUENCE "public"."units_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."units_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."units_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;

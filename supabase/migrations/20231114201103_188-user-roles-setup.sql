alter table "public"."testTable" drop constraint "testTable_pkey";

drop index if exists "public"."testTable_pkey";

drop table "public"."testTable";

create table "public"."roles" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "role" text not null,
    "description" text
);


alter table "public"."roles" enable row level security;

create table "public"."userRoles" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user" uuid not null,
    "roles" bigint not null
);


alter table "public"."userRoles" enable row level security;

create table "public"."users" (
    "id" uuid not null,
    "email" text,
    "firstName" text,
    "lastName" text
);


alter table "public"."users" enable row level security;

CREATE UNIQUE INDEX roles_pkey ON public.roles USING btree (id);

CREATE UNIQUE INDEX "userRoles_pkey" ON public."userRoles" USING btree (id);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id);

alter table "public"."roles" add constraint "roles_pkey" PRIMARY KEY using index "roles_pkey";

alter table "public"."userRoles" add constraint "userRoles_pkey" PRIMARY KEY using index "userRoles_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."userRoles" add constraint "userRoles_roles_fkey" FOREIGN KEY (roles) REFERENCES roles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."userRoles" validate constraint "userRoles_roles_fkey";

alter table "public"."userRoles" add constraint "userRoles_user_fkey" FOREIGN KEY ("user") REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."userRoles" validate constraint "userRoles_user_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into public.users (id, email)
  values (new.id, new.email);
  return new;
end;
$function$
;

create policy "Enable delete for authenticated users only"
on "public"."roles"
as permissive
for delete
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."roles"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable select for authenticated users only"
on "public"."roles"
as permissive
for select
to authenticated
using (true);


create policy "Enable update for authenticated users only"
on "public"."roles"
as permissive
for update
to authenticated
using (true)
with check (true);


create policy "Enable delete for authenticated users only"
on "public"."userRoles"
as permissive
for delete
to authenticated
using (true);


create policy "Enable insert for authenticated users only"
on "public"."userRoles"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable select for authenticated users only"
on "public"."userRoles"
as permissive
for select
to authenticated
using (true);


create policy "Enable select for authenticated users only"
on "public"."users"
as permissive
for select
to authenticated
using (true);



